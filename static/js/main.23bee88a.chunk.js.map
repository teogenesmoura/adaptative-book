{"version":3,"sources":["logo.svg","containers/InitialPageContainer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","body","height","fontFamily","container","padding","display","flexDirection","justifyContent","title","fontWeight","alignSelf","width","fontSize","description","sidebar","credits","color","selectionContainer","overflow","borderRadius","border","margin","backgroundColor","selectionTitle","button","background","boxShadow","InitialPage","classes","React","useState","checkedBitcoin","checkedCovid","state","setState","handleChange","event","target","name","checked","Fade","in","timeout","Grid","className","item","xs","FormGroup","row","style","FormControlLabel","control","Checkbox","onChange","label","onClick","console","log","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.23bee88a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport { Grid, Fade, Divider, FormGroup, FormControlLabel, Checkbox, CheckBoxIcon, CheckBoxOutlineBlankIcon } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nconst useStyles = makeStyles({\n  body: {\n    height: '100vh',\n    fontFamily: 'EB Garamond, serif',\n  },\n  container: {\n    padding: '1rem',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent:  'center',\n  },\n  title: {\n    fontWeight: 400,\n    alignSelf: 'flex-start',\n    width: '100%',\n    fontSize: '2rem',\n  },\n  description: {\n    alignSelf: 'flex-start',\n    width: '100%',\n    fontSize: '1.2rem',\n  },\n  sidebar: {\n    height: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-end',\n    padding: '0 1rem 0 0',\n  },\n  credits: {\n    color: '#C6C6C6',\n    alignSelf: 'flex-end',\n  },\n  selectionContainer: {\n    overflow: 'auto',\n    display: 'flex',\n    flexDirection: 'column',\n    borderRadius: '5px',\n    border: '1px solid #F4F4F4',\n    width: '50%',\n    alignSelf: 'center',\n    height: '20vh',\n    padding: '0 1rem',\n    margin: '1rem 0',\n    backgroundColor: '#FDFDFD',\n  },\n  selectionTitle: {\n    alignSelf: 'center',\n    color: '#A6A6A6',\n  },\n  button: {\n    margin: '2rem 0 0 0',\n    alignSelf: 'center',\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    border: 0,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n    fontWeight: 600,\n  },\n});\n\nexport default function InitialPage() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    checkedBitcoin: false,\n    checkedCovid: false,\n  });\n\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  const checkBitcoinStatus = () => {\n    return \"bitcoin is cool\"\n  }\n\n  const checkCovidStatus = () => {\n    return \"covid is not cool\"\n  }\n  const handleButtonClick = (event) => {\n    console.log(checkBitcoinStatus());\n    console.log(checkCovidStatus());\n    // console.log(\"state of covid:\" + state.checkedCovid);\n  }\n\n  return (\n    <Fade in timeout={3000}>\n      <Grid container className={classes.body}>\n        <Grid item xs={2} className={classes.sidebar}></Grid>\n        <Grid item xs={8} className={classes.container}>\n          <h1 className={classes.title}> What is the future of text-based storytelling? </h1>\n          <section className={classes.description}>\n            <p> The <i> Tale of Passion and Prowness</i> is a short-story that responds dinamically\n            to social changes in the real world. <br></br>Are you ready to embark in an adventure directly\n            influenced by the world around you? </p>\n          </section>\n          <h3 className={classes.selectionTitle}>My story should be influenced by...</h3>\n          <section className={classes.selectionContainer}>\n            <FormGroup row style={{display: 'flex'}}>\n             <FormControlLabel\n               control={<Checkbox checked={state.checkedBitcoin} onChange={handleChange} name=\"checkedBitcoin\" />}\n               label=\"Bitcoin volatility\"\n             />\n             <FormControlLabel\n               control={<Checkbox checked={state.checkedCovid} onChange={handleChange} name=\"checkedCovid\" />}\n               label=\"COVID-19 spread across the globe\"\n             />\n            </FormGroup>\n          </section>\n          <button className={classes.button} onClick={handleButtonClick}> Start reading! </button>\n        </Grid>\n        <Grid item xs={2} className={classes.sidebar}>\n          <h5 className={classes.credits}><i>by Te√≥genes Moura</i></h5>\n        </Grid>\n      </Grid>\n    </Fade>\n  )\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport InitialPage from \"./containers/InitialPageContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/adaptative-book\">\n            <InitialPage></InitialPage>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}